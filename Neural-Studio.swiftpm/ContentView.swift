import SwiftUI

struct ContentView: View {
    
    func loopByActivationFunc(accuracies: Array<Array<Array<Double>>>) {
        for activationFuncGroup in accuracies {
            for learningRateGroup in activationFuncGroup {
                print(learningRateGroup)
                break
            }
            break
        }
    }

    // all values generated from a Deep FFNN trained with MNIST and created with PyTorch
    //generated from MNISTLogistic.jpynb
    var accuracies1 = [[[0.8224, 0.8692, 0.8834, 0.8923, 0.8978, 0.9024, 0.9059, 0.9092, 0.912, 0.9144, 0.9168, 0.9186, 0.9203, 0.9219, 0.9236, 0.9256, 0.9269, 0.9276, 0.9289, 0.931], [0.9393, 0.9446, 0.95, 0.9548, 0.9579, 0.9622, 0.9621, 0.9659, 0.9688, 0.9688, 0.972, 0.9737, 0.9743, 0.9754, 0.9759, 0.9779, 0.9777, 0.9789, 0.9797, 0.98], [0.9625, 0.9666, 0.9726, 0.976, 0.978, 0.9763, 0.979, 0.9797, 0.9717, 0.9846, 0.9812, 0.9802, 0.9726, 0.9834, 0.9826, 0.9817, 0.9874, 0.9866, 0.9852, 0.986], [0.9636, 0.9667, 0.967, 0.9752, 0.972, 0.9686, 0.9777, 0.9729, 0.9784, 0.9752, 0.9723, 0.9586, 0.9772, 0.981, 0.9811, 0.9818, 0.9746, 0.9783, 0.9754, 0.9816]], [[0.8227, 0.8692, 0.8847, 0.8924, 0.8984, 0.9024, 0.906, 0.9092, 0.9116, 0.9132, 0.9152, 0.9164, 0.9196, 0.9207, 0.9224, 0.9243, 0.9254, 0.927, 0.9282, 0.9298], [0.9379, 0.947, 0.9509, 0.9568, 0.96, 0.9625, 0.965, 0.9669, 0.9685, 0.9688, 0.972, 0.9725, 0.9732, 0.974, 0.976, 0.9768, 0.9784, 0.9739, 0.9785, 0.9797], [0.9622, 0.9714, 0.967, 0.971, 0.9785, 0.9766, 0.9772, 0.9784, 0.9751, 0.9833, 0.9814, 0.9824, 0.9812, 0.9817, 0.9838, 0.986, 0.9854, 0.9865, 0.9898, 0.9888], [0.9584, 0.9634, 0.9678, 0.9674, 0.9688, 0.9744, 0.9732, 0.9704, 0.9734, 0.9758, 0.9821, 0.9748, 0.9626, 0.9797, 0.9813, 0.9808, 0.9823, 0.982, 0.9816, 0.982]], [[0.8111, 0.8602, 0.8791, 0.8897, 0.8958, 0.9006, 0.905, 0.908, 0.911, 0.9129, 0.9158, 0.9174, 0.9193, 0.921, 0.9227, 0.9241, 0.9248, 0.9269, 0.9276, 0.929], [0.9371, 0.9433, 0.9497, 0.953, 0.957, 0.9594, 0.962, 0.9643, 0.9653, 0.9684, 0.9698, 0.971, 0.9717, 0.973, 0.9744, 0.9749, 0.9757, 0.9757, 0.977, 0.9778], [0.9728, 0.9724, 0.9771, 0.9788, 0.9804, 0.9818, 0.9827, 0.9822, 0.9862, 0.9862, 0.9861, 0.989, 0.9899, 0.9874, 0.9883, 0.9886, 0.9902, 0.9907, 0.99, 0.9926], [0.9805, 0.9718, 0.9838, 0.9828, 0.9855, 0.9857, 0.9811, 0.9862, 0.9865, 0.9845, 0.9908, 0.9912, 0.991, 0.99, 0.9898, 0.9928, 0.9938, 0.9929, 0.9936, 0.995]], [[0.4967, 0.6424, 0.6962, 0.7292, 0.7689, 0.7962, 0.8179, 0.83, 0.8417, 0.8496, 0.8568, 0.8617, 0.867, 0.8712, 0.8752, 0.8786, 0.8815, 0.8845, 0.8868, 0.8886], [0.9036, 0.9118, 0.9177, 0.9219, 0.9259, 0.9304, 0.9329, 0.9352, 0.9375, 0.9402, 0.9412, 0.9432, 0.9452, 0.9467, 0.9478, 0.9488, 0.9502, 0.9522, 0.9526, 0.9538], [0.957, 0.9602, 0.9612, 0.9654, 0.9675, 0.9692, 0.971, 0.9723, 0.9724, 0.9749, 0.9753, 0.9765, 0.9775, 0.9777, 0.9782, 0.9799, 0.98, 0.9808, 0.9816, 0.9811], [0.981, 0.9812, 0.982, 0.9812, 0.9838, 0.9835, 0.9859, 0.9866, 0.9869, 0.986, 0.9868, 0.9894, 0.9888, 0.989, 0.9906, 0.9899, 0.9901, 0.9906, 0.9912, 0.9914]]]

    //generated from MNISTLogistic.jpynb
    var accuracies2 = [[[0.548, 0.8192, 0.8614, 0.8819, 0.8914, 0.8986, 0.9022, 0.9077, 0.9116, 0.9146, 0.9173, 0.9207, 0.9232, 0.9267, 0.9284, 0.9313, 0.9339, 0.9362, 0.9386, 0.9405], [0.9407, 0.9606, 0.9685, 0.9663, 0.9751, 0.9801, 0.9804, 0.9835, 0.983, 0.9863, 0.9878, 0.9893, 0.9903, 0.9893, 0.9915, 0.9934, 0.9938, 0.9922, 0.9928, 0.9952], [0.9309, 0.9499, 0.9539, 0.96, 0.952, 0.9596, 0.9678, 0.9696, 0.972, 0.9689, 0.9768, 0.9725, 0.9696, 0.9748, 0.9761, 0.9781, 0.977, 0.974, 0.9768, 0.9773], [0.1124, 0.1044, 0.1124, 0.1044, 0.1124, 0.1124, 0.1044, 0.1124, 0.1124, 0.0992, 0.1124, 0.1044, 0.1124, 0.1044, 0.0975, 0.1124, 0.1124, 0.0993, 0.1022, 0.1022]], [[0.5404, 0.7967, 0.8606, 0.8836, 0.8954, 0.9018, 0.9061, 0.91, 0.915, 0.9194, 0.9211, 0.9261, 0.9287, 0.9302, 0.9337, 0.9356, 0.9384, 0.9389, 0.9412, 0.9434], [0.9504, 0.9592, 0.968, 0.97, 0.9744, 0.9783, 0.9815, 0.9807, 0.9765, 0.9866, 0.9876, 0.9895, 0.9884, 0.9893, 0.9848, 0.9909, 0.9932, 0.9931, 0.9933, 0.9938], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987]], [[0.6804, 0.8389, 0.8701, 0.8857, 0.8941, 0.9003, 0.9061, 0.9103, 0.9136, 0.9164, 0.9194, 0.9216, 0.9243, 0.9268, 0.9293, 0.9312, 0.9337, 0.9357, 0.9378, 0.9392], [0.9516, 0.9609, 0.966, 0.9716, 0.9754, 0.9779, 0.9791, 0.9821, 0.9821, 0.9846, 0.987, 0.9878, 0.9887, 0.9901, 0.9906, 0.9919, 0.9911, 0.9916, 0.9932, 0.9946], [0.9723, 0.9818, 0.9809, 0.9887, 0.9887, 0.9894, 0.9932, 0.9946, 0.9928, 0.9948, 0.9952, 0.9955, 0.9962, 0.997, 0.996, 0.9982, 0.9994, 0.9986, 0.9998, 0.9999], [0.9717, 0.9825, 0.9807, 0.9836, 0.9868, 0.9751, 0.9862, 0.9868, 0.9904, 0.9902, 0.9911, 0.9928, 0.9916, 0.9917, 0.9938, 0.9952, 0.9946, 0.9921, 0.9927, 0.9915]], [[0.1124, 0.1124, 0.1124, 0.1124, 0.1159, 0.1317, 0.173, 0.335, 0.3101, 0.3636, 0.3892, 0.4013, 0.4372, 0.481, 0.513, 0.5493, 0.583, 0.6101, 0.6288, 0.6512], [0.7935, 0.8571, 0.8842, 0.8981, 0.9058, 0.9133, 0.919, 0.9247, 0.9294, 0.9331, 0.9374, 0.9402, 0.944, 0.9462, 0.9496, 0.952, 0.9533, 0.9558, 0.9579, 0.9592], [0.9604, 0.968, 0.9715, 0.9743, 0.9765, 0.9791, 0.9796, 0.9806, 0.9832, 0.9829, 0.9869, 0.9848, 0.9888, 0.9889, 0.991, 0.9912, 0.9905, 0.9921, 0.9925, 0.9919], [0.987, 0.9884, 0.9934, 0.9928, 0.9952, 0.9956, 0.9916, 0.9969, 0.9942, 0.9971, 0.9965, 0.9986, 0.9992, 0.9976, 0.999, 0.9995, 0.999, 0.9998, 0.9997, 0.9998]]]

    //generated from MNISTLogistic.jpynb
    var accuracies3 = [[[0.3936, 0.6995, 0.8048, 0.8521, 0.8782, 0.8914, 0.9004, 0.9062, 0.9122, 0.9158, 0.9218, 0.9264, 0.9295, 0.9338, 0.9366, 0.941, 0.9416, 0.9461, 0.9482, 0.9502], [0.9591, 0.9652, 0.9685, 0.963, 0.98, 0.9813, 0.9857, 0.9875, 0.9872, 0.9901, 0.9915, 0.9909, 0.9934, 0.9929, 0.9918, 0.9922, 0.9942, 0.9957, 0.9933, 0.9953], [0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.0987, 0.1044, 0.1044, 0.1124, 0.1044, 0.1124, 0.1124, 0.1124, 0.1124, 0.0986], [0.1044, 0.1044, 0.0975, 0.0993, 0.1124, 0.0987, 0.1124, 0.0986, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1044, 0.0986, 0.0987, 0.1124, 0.1022, 0.1022, 0.0975]], [[0.1355, 0.4966, 0.767, 0.8399, 0.8723, 0.8862, 0.8984, 0.904, 0.911, 0.9159, 0.922, 0.9248, 0.9298, 0.9333, 0.9363, 0.9392, 0.9423, 0.9453, 0.9473, 0.95], [0.9558, 0.9644, 0.9723, 0.9753, 0.9802, 0.9806, 0.9822, 0.9854, 0.988, 0.9885, 0.9892, 0.9924, 0.9922, 0.9937, 0.9934, 0.9956, 0.9942, 0.9949, 0.9962, 0.9905], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987]], [[0.6103, 0.7829, 0.8448, 0.8742, 0.89, 0.8986, 0.9057, 0.911, 0.9146, 0.9187, 0.9215, 0.9263, 0.9282, 0.9318, 0.9363, 0.9383, 0.9414, 0.9441, 0.9466, 0.9485], [0.951, 0.9653, 0.972, 0.9758, 0.978, 0.9788, 0.9816, 0.9808, 0.9866, 0.9863, 0.9886, 0.9905, 0.9904, 0.9915, 0.991, 0.992, 0.9922, 0.9943, 0.9951, 0.9956], [0.974, 0.9813, 0.9834, 0.9864, 0.9836, 0.9879, 0.9925, 0.9909, 0.9946, 0.9951, 0.9948, 0.9956, 0.9963, 0.997, 0.9969, 0.9968, 0.9944, 0.9981, 0.9947, 0.997], [0.9814, 0.9801, 0.9884, 0.9878, 0.9866, 0.9926, 0.9947, 0.9907, 0.9865, 0.994, 0.9947, 0.994, 0.9942, 0.9957, 0.9927, 0.9953, 0.998, 0.997, 0.9979, 0.9966]], [[0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1044, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124], [0.1124, 0.107, 0.29, 0.4274, 0.5625, 0.6666, 0.7202, 0.7527, 0.8082, 0.8646, 0.8832, 0.8927, 0.9098, 0.9171, 0.9235, 0.9291, 0.9356, 0.9373, 0.9439, 0.9451], [0.9434, 0.9609, 0.9626, 0.9676, 0.9503, 0.9759, 0.9784, 0.9788, 0.983, 0.9844, 0.9859, 0.9866, 0.9887, 0.989, 0.9889, 0.9888, 0.9902, 0.9898, 0.9909, 0.9925], [0.9864, 0.9861, 0.9858, 0.9908, 0.9895, 0.9934, 0.9863, 0.9947, 0.9939, 0.9951, 0.9959, 0.9862, 0.9956, 0.997, 0.9968, 0.9854, 0.9979, 0.9974, 0.9993, 0.9994]]]
   
    //generated from MNISTLogistic.jpynb
    var accuracies4 = [[[0.0993, 0.2072, 0.5265, 0.7927, 0.8487, 0.8709, 0.883, 0.8938, 0.9046, 0.9133, 0.9196, 0.9272, 0.9315, 0.9374, 0.9443, 0.9465, 0.9514, 0.9541, 0.9566, 0.9586], [0.9592, 0.9721, 0.9818, 0.9837, 0.9812, 0.9892, 0.986, 0.9924, 0.9921, 0.9941, 0.9955, 0.9964, 0.9953, 0.9974, 0.9977, 0.9991, 0.9993, 0.9989, 0.9992, 0.9987], [0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1022, 0.1124, 0.1044, 0.1124, 0.0992, 0.1124, 0.0993, 0.1044, 0.1124, 0.1124, 0.1124, 0.0987, 0.1022, 0.1124], [0.0992, 0.1124, 0.1044, 0.1124, 0.0987, 0.1044, 0.1124, 0.0986, 0.1044, 0.1124, 0.0987, 0.1124, 0.1044, 0.1124, 0.1124, 0.1124, 0.1124, 0.1022, 0.0992, 0.1044]], [[0.2554, 0.4177, 0.5916, 0.805, 0.8552, 0.8744, 0.8872, 0.9023, 0.9143, 0.9222, 0.9256, 0.9337, 0.9384, 0.9452, 0.9498, 0.953, 0.9559, 0.9594, 0.9602, 0.9614], [0.9652, 0.9713, 0.9783, 0.9828, 0.9839, 0.9847, 0.9834, 0.9905, 0.9936, 0.9891, 0.9944, 0.9954, 0.996, 0.9979, 0.9899, 0.9946, 0.9978, 0.9975, 0.9974, 0.9981], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987]], [[0.5539, 0.7662, 0.845, 0.8756, 0.8892, 0.8982, 0.9042, 0.9095, 0.9141, 0.9178, 0.9214, 0.9252, 0.9283, 0.9318, 0.9337, 0.938, 0.9406, 0.9434, 0.9456, 0.9486], [0.9565, 0.955, 0.9716, 0.9737, 0.9791, 0.9804, 0.9844, 0.9813, 0.988, 0.986, 0.9897, 0.9899, 0.9916, 0.9921, 0.9944, 0.9944, 0.9943, 0.9934, 0.9946, 0.997], [0.9676, 0.979, 0.9836, 0.9899, 0.9887, 0.9908, 0.9943, 0.992, 0.9939, 0.9952, 0.9954, 0.9939, 0.9972, 0.9977, 0.9973, 0.9979, 0.9983, 0.9977, 0.9985, 0.9966], [0.9828, 0.986, 0.9897, 0.9892, 0.9892, 0.9939, 0.9943, 0.9934, 0.9942, 0.9878, 0.9936, 0.9916, 0.9912, 0.9948, 0.9951, 0.995, 0.9958, 0.9964, 0.9959, 0.9956]], [[0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124], [0.1124, 0.1022, 0.1124, 0.0975, 0.1022, 0.1124, 0.1124, 0.1124, 0.0974, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.2046, 0.2123, 0.2797, 0.3167, 0.3785], [0.4949, 0.6303, 0.7963, 0.8696, 0.881, 0.9208, 0.9382, 0.9432, 0.9536, 0.9548, 0.9609, 0.9672, 0.9665, 0.9714, 0.9726, 0.9758, 0.9725, 0.9811, 0.9775, 0.9846], [0.979, 0.9835, 0.9846, 0.9874, 0.9765, 0.9902, 0.9896, 0.9912, 0.9896, 0.9916, 0.9929, 0.9868, 0.9909, 0.9949, 0.993, 0.9953, 0.9968, 0.9979, 0.9965, 0.9918]]]

    //generated from MNISTLogistic.jpynb
    var totalAccuracies = [[[[0.8224, 0.8692, 0.8834, 0.8923, 0.8978, 0.9024, 0.9059, 0.9092, 0.912, 0.9144, 0.9168, 0.9186, 0.9203, 0.9219, 0.9236, 0.9256, 0.9269, 0.9276, 0.9289, 0.931], [0.9393, 0.9446, 0.95, 0.9548, 0.9579, 0.9622, 0.9621, 0.9659, 0.9688, 0.9688, 0.972, 0.9737, 0.9743, 0.9754, 0.9759, 0.9779, 0.9777, 0.9789, 0.9797, 0.98], [0.9625, 0.9666, 0.9726, 0.976, 0.978, 0.9763, 0.979, 0.9797, 0.9717, 0.9846, 0.9812, 0.9802, 0.9726, 0.9834, 0.9826, 0.9817, 0.9874, 0.9866, 0.9852, 0.986], [0.9636, 0.9667, 0.967, 0.9752, 0.972, 0.9686, 0.9777, 0.9729, 0.9784, 0.9752, 0.9723, 0.9586, 0.9772, 0.981, 0.9811, 0.9818, 0.9746, 0.9783, 0.9754, 0.9816]], [[0.8227, 0.8692, 0.8847, 0.8924, 0.8984, 0.9024, 0.906, 0.9092, 0.9116, 0.9132, 0.9152, 0.9164, 0.9196, 0.9207, 0.9224, 0.9243, 0.9254, 0.927, 0.9282, 0.9298], [0.9379, 0.947, 0.9509, 0.9568, 0.96, 0.9625, 0.965, 0.9669, 0.9685, 0.9688, 0.972, 0.9725, 0.9732, 0.974, 0.976, 0.9768, 0.9784, 0.9739, 0.9785, 0.9797], [0.9622, 0.9714, 0.967, 0.971, 0.9785, 0.9766, 0.9772, 0.9784, 0.9751, 0.9833, 0.9814, 0.9824, 0.9812, 0.9817, 0.9838, 0.986, 0.9854, 0.9865, 0.9898, 0.9888], [0.9584, 0.9634, 0.9678, 0.9674, 0.9688, 0.9744, 0.9732, 0.9704, 0.9734, 0.9758, 0.9821, 0.9748, 0.9626, 0.9797, 0.9813, 0.9808, 0.9823, 0.982, 0.9816, 0.982]], [[0.8111, 0.8602, 0.8791, 0.8897, 0.8958, 0.9006, 0.905, 0.908, 0.911, 0.9129, 0.9158, 0.9174, 0.9193, 0.921, 0.9227, 0.9241, 0.9248, 0.9269, 0.9276, 0.929], [0.9371, 0.9433, 0.9497, 0.953, 0.957, 0.9594, 0.962, 0.9643, 0.9653, 0.9684, 0.9698, 0.971, 0.9717, 0.973, 0.9744, 0.9749, 0.9757, 0.9757, 0.977, 0.9778], [0.9728, 0.9724, 0.9771, 0.9788, 0.9804, 0.9818, 0.9827, 0.9822, 0.9862, 0.9862, 0.9861, 0.989, 0.9899, 0.9874, 0.9883, 0.9886, 0.9902, 0.9907, 0.99, 0.9926], [0.9805, 0.9718, 0.9838, 0.9828, 0.9855, 0.9857, 0.9811, 0.9862, 0.9865, 0.9845, 0.9908, 0.9912, 0.991, 0.99, 0.9898, 0.9928, 0.9938, 0.9929, 0.9936, 0.995]], [[0.4967, 0.6424, 0.6962, 0.7292, 0.7689, 0.7962, 0.8179, 0.83, 0.8417, 0.8496, 0.8568, 0.8617, 0.867, 0.8712, 0.8752, 0.8786, 0.8815, 0.8845, 0.8868, 0.8886], [0.9036, 0.9118, 0.9177, 0.9219, 0.9259, 0.9304, 0.9329, 0.9352, 0.9375, 0.9402, 0.9412, 0.9432, 0.9452, 0.9467, 0.9478, 0.9488, 0.9502, 0.9522, 0.9526, 0.9538], [0.957, 0.9602, 0.9612, 0.9654, 0.9675, 0.9692, 0.971, 0.9723, 0.9724, 0.9749, 0.9753, 0.9765, 0.9775, 0.9777, 0.9782, 0.9799, 0.98, 0.9808, 0.9816, 0.9811], [0.981, 0.9812, 0.982, 0.9812, 0.9838, 0.9835, 0.9859, 0.9866, 0.9869, 0.986, 0.9868, 0.9894, 0.9888, 0.989, 0.9906, 0.9899, 0.9901, 0.9906, 0.9912, 0.9914]]], [[[0.548, 0.8192, 0.8614, 0.8819, 0.8914, 0.8986, 0.9022, 0.9077, 0.9116, 0.9146, 0.9173, 0.9207, 0.9232, 0.9267, 0.9284, 0.9313, 0.9339, 0.9362, 0.9386, 0.9405], [0.9407, 0.9606, 0.9685, 0.9663, 0.9751, 0.9801, 0.9804, 0.9835, 0.983, 0.9863, 0.9878, 0.9893, 0.9903, 0.9893, 0.9915, 0.9934, 0.9938, 0.9922, 0.9928, 0.9952], [0.9309, 0.9499, 0.9539, 0.96, 0.952, 0.9596, 0.9678, 0.9696, 0.972, 0.9689, 0.9768, 0.9725, 0.9696, 0.9748, 0.9761, 0.9781, 0.977, 0.974, 0.9768, 0.9773], [0.1124, 0.1044, 0.1124, 0.1044, 0.1124, 0.1124, 0.1044, 0.1124, 0.1124, 0.0992, 0.1124, 0.1044, 0.1124, 0.1044, 0.0975, 0.1124, 0.1124, 0.0993, 0.1022, 0.1022]], [[0.5404, 0.7967, 0.8606, 0.8836, 0.8954, 0.9018, 0.9061, 0.91, 0.915, 0.9194, 0.9211, 0.9261, 0.9287, 0.9302, 0.9337, 0.9356, 0.9384, 0.9389, 0.9412, 0.9434], [0.9504, 0.9592, 0.968, 0.97, 0.9744, 0.9783, 0.9815, 0.9807, 0.9765, 0.9866, 0.9876, 0.9895, 0.9884, 0.9893, 0.9848, 0.9909, 0.9932, 0.9931, 0.9933, 0.9938], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987]], [[0.6804, 0.8389, 0.8701, 0.8857, 0.8941, 0.9003, 0.9061, 0.9103, 0.9136, 0.9164, 0.9194, 0.9216, 0.9243, 0.9268, 0.9293, 0.9312, 0.9337, 0.9357, 0.9378, 0.9392], [0.9516, 0.9609, 0.966, 0.9716, 0.9754, 0.9779, 0.9791, 0.9821, 0.9821, 0.9846, 0.987, 0.9878, 0.9887, 0.9901, 0.9906, 0.9919, 0.9911, 0.9916, 0.9932, 0.9946], [0.9723, 0.9818, 0.9809, 0.9887, 0.9887, 0.9894, 0.9932, 0.9946, 0.9928, 0.9948, 0.9952, 0.9955, 0.9962, 0.997, 0.996, 0.9982, 0.9994, 0.9986, 0.9998, 0.9999], [0.9717, 0.9825, 0.9807, 0.9836, 0.9868, 0.9751, 0.9862, 0.9868, 0.9904, 0.9902, 0.9911, 0.9928, 0.9916, 0.9917, 0.9938, 0.9952, 0.9946, 0.9921, 0.9927, 0.9915]], [[0.1124, 0.1124, 0.1124, 0.1124, 0.1159, 0.1317, 0.173, 0.335, 0.3101, 0.3636, 0.3892, 0.4013, 0.4372, 0.481, 0.513, 0.5493, 0.583, 0.6101, 0.6288, 0.6512], [0.7935, 0.8571, 0.8842, 0.8981, 0.9058, 0.9133, 0.919, 0.9247, 0.9294, 0.9331, 0.9374, 0.9402, 0.944, 0.9462, 0.9496, 0.952, 0.9533, 0.9558, 0.9579, 0.9592], [0.9604, 0.968, 0.9715, 0.9743, 0.9765, 0.9791, 0.9796, 0.9806, 0.9832, 0.9829, 0.9869, 0.9848, 0.9888, 0.9889, 0.991, 0.9912, 0.9905, 0.9921, 0.9925, 0.9919], [0.987, 0.9884, 0.9934, 0.9928, 0.9952, 0.9956, 0.9916, 0.9969, 0.9942, 0.9971, 0.9965, 0.9986, 0.9992, 0.9976, 0.999, 0.9995, 0.999, 0.9998, 0.9997, 0.9998]]], [[[0.3936, 0.6995, 0.8048, 0.8521, 0.8782, 0.8914, 0.9004, 0.9062, 0.9122, 0.9158, 0.9218, 0.9264, 0.9295, 0.9338, 0.9366, 0.941, 0.9416, 0.9461, 0.9482, 0.9502], [0.9591, 0.9652, 0.9685, 0.963, 0.98, 0.9813, 0.9857, 0.9875, 0.9872, 0.9901, 0.9915, 0.9909, 0.9934, 0.9929, 0.9918, 0.9922, 0.9942, 0.9957, 0.9933, 0.9953], [0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.0987, 0.1044, 0.1044, 0.1124, 0.1044, 0.1124, 0.1124, 0.1124, 0.1124, 0.0986], [0.1044, 0.1044, 0.0975, 0.0993, 0.1124, 0.0987, 0.1124, 0.0986, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1044, 0.0986, 0.0987, 0.1124, 0.1022, 0.1022, 0.0975]], [[0.1355, 0.4966, 0.767, 0.8399, 0.8723, 0.8862, 0.8984, 0.904, 0.911, 0.9159, 0.922, 0.9248, 0.9298, 0.9333, 0.9363, 0.9392, 0.9423, 0.9453, 0.9473, 0.95], [0.9558, 0.9644, 0.9723, 0.9753, 0.9802, 0.9806, 0.9822, 0.9854, 0.988, 0.9885, 0.9892, 0.9924, 0.9922, 0.9937, 0.9934, 0.9956, 0.9942, 0.9949, 0.9962, 0.9905], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987]], [[0.6103, 0.7829, 0.8448, 0.8742, 0.89, 0.8986, 0.9057, 0.911, 0.9146, 0.9187, 0.9215, 0.9263, 0.9282, 0.9318, 0.9363, 0.9383, 0.9414, 0.9441, 0.9466, 0.9485], [0.951, 0.9653, 0.972, 0.9758, 0.978, 0.9788, 0.9816, 0.9808, 0.9866, 0.9863, 0.9886, 0.9905, 0.9904, 0.9915, 0.991, 0.992, 0.9922, 0.9943, 0.9951, 0.9956], [0.974, 0.9813, 0.9834, 0.9864, 0.9836, 0.9879, 0.9925, 0.9909, 0.9946, 0.9951, 0.9948, 0.9956, 0.9963, 0.997, 0.9969, 0.9968, 0.9944, 0.9981, 0.9947, 0.997], [0.9814, 0.9801, 0.9884, 0.9878, 0.9866, 0.9926, 0.9947, 0.9907, 0.9865, 0.994, 0.9947, 0.994, 0.9942, 0.9957, 0.9927, 0.9953, 0.998, 0.997, 0.9979, 0.9966]], [[0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1044, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124], [0.1124, 0.107, 0.29, 0.4274, 0.5625, 0.6666, 0.7202, 0.7527, 0.8082, 0.8646, 0.8832, 0.8927, 0.9098, 0.9171, 0.9235, 0.9291, 0.9356, 0.9373, 0.9439, 0.9451], [0.9434, 0.9609, 0.9626, 0.9676, 0.9503, 0.9759, 0.9784, 0.9788, 0.983, 0.9844, 0.9859, 0.9866, 0.9887, 0.989, 0.9889, 0.9888, 0.9902, 0.9898, 0.9909, 0.9925], [0.9864, 0.9861, 0.9858, 0.9908, 0.9895, 0.9934, 0.9863, 0.9947, 0.9939, 0.9951, 0.9959, 0.9862, 0.9956, 0.997, 0.9968, 0.9854, 0.9979, 0.9974, 0.9993, 0.9994]]], [[[0.0993, 0.2072, 0.5265, 0.7927, 0.8487, 0.8709, 0.883, 0.8938, 0.9046, 0.9133, 0.9196, 0.9272, 0.9315, 0.9374, 0.9443, 0.9465, 0.9514, 0.9541, 0.9566, 0.9586], [0.9592, 0.9721, 0.9818, 0.9837, 0.9812, 0.9892, 0.986, 0.9924, 0.9921, 0.9941, 0.9955, 0.9964, 0.9953, 0.9974, 0.9977, 0.9991, 0.9993, 0.9989, 0.9992, 0.9987], [0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1022, 0.1124, 0.1044, 0.1124, 0.0992, 0.1124, 0.0993, 0.1044, 0.1124, 0.1124, 0.1124, 0.0987, 0.1022, 0.1124], [0.0992, 0.1124, 0.1044, 0.1124, 0.0987, 0.1044, 0.1124, 0.0986, 0.1044, 0.1124, 0.0987, 0.1124, 0.1044, 0.1124, 0.1124, 0.1124, 0.1124, 0.1022, 0.0992, 0.1044]], [[0.2554, 0.4177, 0.5916, 0.805, 0.8552, 0.8744, 0.8872, 0.9023, 0.9143, 0.9222, 0.9256, 0.9337, 0.9384, 0.9452, 0.9498, 0.953, 0.9559, 0.9594, 0.9602, 0.9614], [0.9652, 0.9713, 0.9783, 0.9828, 0.9839, 0.9847, 0.9834, 0.9905, 0.9936, 0.9891, 0.9944, 0.9954, 0.996, 0.9979, 0.9899, 0.9946, 0.9978, 0.9975, 0.9974, 0.9981], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987], [0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987, 0.0987]], [[0.5539, 0.7662, 0.845, 0.8756, 0.8892, 0.8982, 0.9042, 0.9095, 0.9141, 0.9178, 0.9214, 0.9252, 0.9283, 0.9318, 0.9337, 0.938, 0.9406, 0.9434, 0.9456, 0.9486], [0.9565, 0.955, 0.9716, 0.9737, 0.9791, 0.9804, 0.9844, 0.9813, 0.988, 0.986, 0.9897, 0.9899, 0.9916, 0.9921, 0.9944, 0.9944, 0.9943, 0.9934, 0.9946, 0.997], [0.9676, 0.979, 0.9836, 0.9899, 0.9887, 0.9908, 0.9943, 0.992, 0.9939, 0.9952, 0.9954, 0.9939, 0.9972, 0.9977, 0.9973, 0.9979, 0.9983, 0.9977, 0.9985, 0.9966], [0.9828, 0.986, 0.9897, 0.9892, 0.9892, 0.9939, 0.9943, 0.9934, 0.9942, 0.9878, 0.9936, 0.9916, 0.9912, 0.9948, 0.9951, 0.995, 0.9958, 0.9964, 0.9959, 0.9956]], [[0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124], [0.1124, 0.1022, 0.1124, 0.0975, 0.1022, 0.1124, 0.1124, 0.1124, 0.0974, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.1124, 0.2046, 0.2123, 0.2797, 0.3167, 0.3785], [0.4949, 0.6303, 0.7963, 0.8696, 0.881, 0.9208, 0.9382, 0.9432, 0.9536, 0.9548, 0.9609, 0.9672, 0.9665, 0.9714, 0.9726, 0.9758, 0.9725, 0.9811, 0.9775, 0.9846], [0.979, 0.9835, 0.9846, 0.9874, 0.9765, 0.9902, 0.9896, 0.9912, 0.9896, 0.9916, 0.9929, 0.9868, 0.9909, 0.9949, 0.993, 0.9953, 0.9968, 0.9979, 0.9965, 0.9918]]]]
    
    //generated from MNISTLogistic.jpynb
    var times1 = [[[3.322, 3.239, 3.249, 3.253, 3.23, 3.242, 3.215, 3.245, 3.217, 3.207, 3.222, 3.384, 3.358, 3.205, 3.233, 3.22, 3.21, 3.229, 3.211, 3.213], [3.225, 3.222, 3.221, 3.227, 3.233, 3.217, 3.237, 3.252, 3.219, 3.219, 3.25, 3.225, 3.247, 3.208, 3.206, 3.206, 3.21, 3.243, 3.239, 3.335], [3.299, 3.262, 3.249, 3.219, 3.216, 3.257, 3.25, 3.213, 3.239, 3.225, 3.237, 3.23, 3.236, 3.212, 3.214, 3.249, 3.248, 3.223, 3.225, 3.24], [3.231, 3.234, 3.226, 3.224, 3.258, 3.245, 3.212, 3.228, 3.226, 3.214, 3.239, 3.257, 3.218, 3.248, 3.278, 3.448, 3.187, 3.224, 3.219, 3.218]], [[3.221, 3.212, 3.233, 3.217, 3.208, 3.199, 3.214, 3.212, 3.224, 3.219, 3.209, 3.211, 3.209, 3.216, 3.209, 3.201, 3.222, 3.207, 3.208, 3.211], [3.201, 3.203, 3.196, 3.206, 3.207, 3.21, 3.206, 3.201, 3.205, 3.208, 3.203, 3.21, 3.213, 3.208, 3.213, 3.225, 3.224, 3.216, 3.208, 3.205], [3.207, 3.213, 3.208, 3.21, 3.2, 3.208, 3.202, 3.206, 3.205, 3.199, 3.216, 3.207, 3.217, 3.217, 3.203, 3.2, 3.206, 3.201, 3.21, 3.205], [3.208, 3.207, 3.208, 3.205, 3.212, 3.204, 3.202, 3.203, 3.217, 3.199, 3.207, 3.211, 3.208, 3.209, 3.196, 3.21, 3.189, 3.221, 3.2, 3.208]], [[3.265, 3.261, 3.262, 3.263, 3.271, 3.267, 3.265, 3.274, 3.271, 3.268, 3.271, 3.273, 3.272, 3.264, 3.261, 3.287, 3.294, 3.285, 3.31, 3.444], [3.273, 3.295, 3.263, 3.269, 3.261, 3.275, 3.273, 3.259, 3.276, 3.286, 3.262, 3.262, 3.273, 3.264, 3.272, 3.27, 3.271, 3.272, 3.265, 3.269], [3.267, 3.275, 3.269, 3.261, 3.267, 3.259, 3.259, 3.282, 3.269, 3.269, 3.258, 3.265, 3.285, 3.266, 3.274, 3.274, 3.264, 3.263, 3.267, 3.26], [3.258, 3.265, 3.257, 3.269, 3.252, 3.322, 3.268, 3.287, 3.264, 3.277, 3.287, 3.273, 3.27, 3.268, 3.274, 3.273, 3.27, 3.306, 3.529, 3.51]], [[3.403, 3.538, 3.326, 3.307, 3.28, 3.363, 3.282, 3.307, 3.382, 3.285, 3.394, 3.277, 3.322, 3.293, 3.358, 3.327, 3.227, 3.248, 3.282, 3.284], [3.236, 3.287, 3.255, 3.259, 3.299, 3.262, 3.222, 3.214, 3.216, 3.222, 3.23, 3.242, 3.231, 3.262, 3.253, 3.227, 3.227, 3.236, 3.219, 3.248], [3.229, 3.216, 3.233, 3.226, 3.225, 3.224, 3.225, 3.219, 3.227, 3.23, 3.224, 3.252, 3.282, 3.229, 3.233, 3.216, 3.235, 3.231, 3.23, 3.244], [3.23, 3.24, 3.234, 3.23, 3.231, 3.241, 3.228, 3.229, 3.228, 3.231, 3.224, 3.22, 3.222, 3.222, 3.221, 3.221, 3.222, 3.243, 3.22, 3.237]]]
    
    //generated from MNISTLogistic.jpynb
    var times2 = [[[3.314, 3.286, 3.258, 3.303, 3.269, 3.273, 3.49, 3.288, 3.279, 3.312, 3.274, 3.285, 3.269, 3.276, 3.271, 3.297, 3.26, 3.27, 3.272, 3.271], [3.257, 3.279, 3.273, 3.291, 3.299, 3.274, 3.286, 3.314, 3.321, 3.285, 3.367, 3.301, 3.282, 3.263, 3.278, 3.282, 3.351, 3.287, 3.336, 3.367], [3.307, 3.279, 3.287, 3.287, 3.273, 3.294, 3.434, 3.322, 3.276, 3.319, 3.279, 3.276, 3.276, 3.266, 3.276, 3.263, 3.262, 3.284, 3.282, 3.306], [3.317, 3.258, 3.288, 3.319, 3.384, 3.325, 3.346, 3.314, 3.385, 3.35, 3.287, 3.258, 3.258, 3.271, 3.279, 3.287, 3.287, 3.347, 3.288, 3.3]], [[3.268, 3.338, 3.306, 3.341, 3.348, 3.24, 3.269, 3.268, 3.274, 3.346, 3.348, 3.312, 3.29, 3.536, 3.271, 3.275, 3.272, 3.268, 3.271, 3.283], [3.295, 3.279, 3.288, 3.3, 3.531, 3.298, 3.354, 3.348, 3.476, 3.331, 3.279, 3.27, 3.281, 3.273, 3.364, 3.322, 3.342, 3.521, 3.284, 3.274], [3.407, 3.302, 3.292, 3.349, 3.392, 3.447, 3.321, 3.487, 3.258, 3.297, 3.32, 3.354, 3.318, 3.518, 3.308, 3.288, 3.271, 3.257, 3.246, 3.276], [3.32, 3.248, 3.337, 3.319, 3.399, 3.371, 3.312, 3.459, 3.252, 3.268, 3.367, 3.288, 3.287, 3.3, 3.29, 3.271, 3.305, 3.265, 3.233, 3.301]], [[3.428, 3.456, 3.42, 3.467, 3.484, 3.459, 3.485, 3.504, 3.404, 3.497, 3.481, 3.467, 3.469, 3.496, 3.391, 3.416, 3.459, 3.505, 3.489, 3.449], [3.427, 3.403, 3.436, 3.521, 3.543, 3.748, 3.405, 3.405, 3.371, 3.445, 3.485, 3.454, 3.436, 3.389, 3.387, 3.47, 3.572, 3.469, 3.53, 3.399], [3.535, 3.634, 3.736, 3.426, 3.448, 3.46, 3.428, 3.463, 3.456, 3.565, 3.478, 3.47, 3.383, 3.389, 3.501, 3.434, 3.528, 3.412, 3.386, 3.459], [3.502, 3.414, 3.374, 3.408, 3.38, 3.378, 3.377, 3.361, 3.372, 3.372, 3.364, 3.393, 3.415, 3.517, 3.401, 3.377, 3.43, 3.403, 3.423, 3.45]], [[3.328, 3.322, 3.343, 3.315, 3.324, 3.298, 3.34, 3.337, 3.422, 3.352, 3.442, 3.435, 3.319, 3.324, 3.319, 3.315, 3.301, 3.307, 3.304, 3.314], [3.349, 3.315, 3.337, 3.395, 3.326, 3.323, 3.314, 3.381, 3.615, 3.365, 3.388, 3.317, 3.314, 3.331, 3.298, 3.333, 3.313, 3.344, 3.331, 3.368], [3.352, 3.315, 3.31, 3.332, 3.405, 3.515, 3.356, 3.338, 3.311, 3.373, 3.353, 3.334, 3.356, 3.354, 3.318, 3.312, 3.311, 3.312, 3.316, 3.316], [3.31, 3.319, 3.335, 3.347, 3.32, 3.315, 3.308, 3.317, 3.313, 3.319, 3.332, 3.318, 3.318, 3.32, 3.318, 3.319, 3.324, 3.317, 3.311, 3.311]]]
    
    //generated from MNISTLogistic.jpynb
    var times3 = [[[3.32, 3.311, 3.307, 3.298, 3.295, 3.307, 3.29, 3.289, 3.313, 3.299, 3.302, 3.297, 3.286, 3.298, 3.298, 3.301, 3.297, 3.299, 3.308, 3.299], [3.294, 3.312, 3.294, 3.304, 3.303, 3.297, 3.327, 3.311, 3.311, 3.3, 3.315, 3.319, 3.306, 3.299, 3.306, 3.304, 3.305, 3.305, 3.289, 3.293], [3.294, 3.295, 3.289, 3.272, 3.284, 3.283, 3.286, 3.288, 3.304, 3.28, 3.288, 3.289, 3.278, 3.291, 3.289, 3.29, 3.298, 3.289, 3.294, 3.293], [3.286, 3.291, 3.285, 3.29, 3.286, 3.287, 3.297, 3.288, 3.289, 3.288, 3.283, 3.286, 3.286, 3.296, 3.284, 3.304, 3.289, 3.288, 3.297, 3.288]], [[3.298, 3.305, 3.328, 3.288, 3.293, 3.32, 3.291, 3.285, 3.294, 3.286, 3.301, 3.298, 3.312, 3.317, 3.305, 3.305, 3.297, 3.288, 3.296, 3.285], [3.291, 3.28, 3.293, 3.358, 3.299, 3.282, 3.296, 3.285, 3.3, 3.293, 3.289, 3.29, 3.294, 3.284, 3.292, 3.289, 3.286, 3.294, 3.286, 3.29], [3.274, 3.281, 3.284, 3.272, 3.272, 3.275, 3.261, 3.291, 3.272, 3.261, 3.264, 3.284, 3.279, 3.285, 3.267, 3.271, 3.276, 3.267, 3.262, 3.275], [3.262, 3.26, 3.269, 3.259, 3.267, 3.273, 3.283, 3.269, 3.283, 3.269, 3.285, 3.269, 3.279, 3.269, 3.272, 3.267, 3.273, 3.284, 3.274, 3.267]], [[3.458, 3.458, 3.475, 3.47, 3.476, 3.48, 3.471, 3.482, 3.477, 3.462, 3.472, 3.477, 3.483, 3.484, 3.476, 3.489, 3.481, 3.477, 3.478, 3.469], [3.481, 3.471, 3.477, 3.484, 3.48, 3.49, 3.484, 3.485, 3.499, 3.471, 3.48, 3.503, 3.493, 3.475, 3.481, 3.476, 3.465, 3.478, 3.489, 3.46], [3.47, 3.467, 3.477, 3.467, 3.449, 3.453, 3.474, 3.477, 3.523, 3.475, 3.48, 3.468, 3.455, 3.461, 3.458, 3.462, 3.461, 3.469, 3.459, 3.467], [3.465, 3.465, 3.468, 3.454, 3.464, 3.465, 3.467, 3.469, 3.446, 3.461, 3.465, 3.467, 3.462, 3.459, 3.466, 3.463, 3.465, 3.452, 3.465, 3.466]], [[3.395, 3.389, 3.382, 3.39, 3.379, 3.395, 3.377, 3.384, 3.374, 3.36, 3.379, 3.384, 3.376, 3.39, 3.388, 3.397, 3.389, 3.387, 3.392, 3.395], [3.385, 3.388, 3.403, 3.402, 3.409, 3.413, 3.413, 3.419, 3.424, 3.427, 3.431, 3.431, 3.43, 3.412, 3.417, 3.429, 3.426, 3.453, 3.443, 3.441], [3.432, 3.441, 3.434, 3.422, 3.436, 3.436, 3.434, 3.429, 3.44, 3.427, 3.433, 3.428, 3.428, 3.425, 3.43, 3.435, 3.424, 3.434, 3.428, 3.444], [3.42, 3.414, 3.411, 3.43, 3.419, 3.421, 3.422, 3.421, 3.422, 3.427, 3.424, 3.43, 3.447, 3.459, 3.426, 3.426, 3.427, 3.42, 3.426, 3.427]]]
    
    var times4 = [[[3.872, 3.769, 3.738, 3.681, 3.655, 3.657, 3.637, 3.644, 3.657, 3.684, 3.701, 3.655, 3.667, 3.68, 3.649, 3.66, 3.651, 3.677, 3.678, 3.693], [3.672, 3.675, 3.647, 3.66, 3.66, 3.677, 3.663, 3.651, 3.671, 3.68, 3.656, 3.662, 3.65, 3.662, 3.667, 3.659, 3.642, 3.667, 3.65, 3.648], [3.642, 3.639, 3.649, 3.638, 3.638, 3.642, 3.675, 3.665, 3.647, 3.637, 3.663, 3.661, 3.639, 3.64, 3.667, 3.654, 3.628, 3.638, 3.654, 3.645], [3.643, 3.655, 3.688, 3.647, 3.632, 3.672, 3.67, 3.628, 3.642, 3.658, 3.66, 3.631, 3.642, 3.678, 3.638, 3.675, 3.65, 3.655, 3.653, 3.651]], [[3.641, 3.647, 3.636, 3.68, 3.66, 3.681, 3.673, 3.829, 3.816, 3.816, 3.806, 3.825, 3.813, 3.829, 3.795, 3.835, 3.84, 3.803, 3.818, 3.77], [3.789, 3.706, 3.736, 3.72, 3.702, 3.717, 3.717, 3.721, 3.719, 3.694, 3.725, 3.728, 3.706, 3.71, 3.697, 3.706, 3.717, 3.687, 3.774, 3.793], [3.711, 3.689, 3.768, 3.719, 3.693, 3.713, 3.71, 3.723, 3.69, 3.67, 3.698, 3.675, 3.729, 3.687, 3.698, 3.673, 3.691, 3.668, 3.699, 3.7], [3.704, 3.69, 3.686, 3.691, 3.718, 3.699, 3.698, 3.686, 3.742, 3.707, 3.663, 3.683, 3.7, 3.677, 3.688, 3.7, 3.696, 3.688, 3.742, 3.693]], [[4.007, 3.976, 3.986, 3.992, 4.014, 4.002, 4.016, 3.98, 4.099, 4.085, 4.259, 4.106, 4.05, 4.036, 4.046, 4.02, 4.007, 3.959, 3.978, 3.927], [4.083, 4.332, 4.0, 3.993, 3.986, 3.96, 3.985, 3.965, 3.993, 3.964, 3.982, 3.954, 3.981, 3.961, 3.958, 4.005, 3.977, 3.967, 3.985, 4.0], [3.967, 3.974, 3.98, 3.993, 3.978, 3.966, 3.973, 3.999, 3.985, 3.983, 3.998, 3.987, 4.098, 4.307, 4.259, 4.13, 4.2, 4.106, 4.01, 3.985], [3.981, 4.001, 3.978, 3.97, 3.994, 3.981, 3.972, 3.987, 3.986, 3.993, 3.973, 3.965, 3.964, 3.998, 3.966, 3.97, 4.019, 3.997, 4.005, 4.072]], [[3.866, 3.834, 3.833, 3.866, 3.854, 3.847, 3.826, 3.816, 3.836, 3.847, 3.845, 3.828, 3.845, 3.834, 3.845, 3.841, 3.872, 3.827, 3.837, 3.869], [3.865, 3.836, 3.858, 3.859, 3.908, 3.84, 3.845, 3.842, 3.869, 3.851, 3.821, 3.853, 3.877, 3.832, 3.855, 3.869, 3.873, 3.878, 3.919, 3.901], [3.878, 3.89, 3.88, 3.889, 3.887, 3.873, 3.862, 3.868, 3.871, 3.849, 3.849, 3.872, 3.879, 3.84, 3.886, 3.848, 3.849, 3.84, 3.835, 3.843], [3.85, 3.872, 3.856, 3.866, 3.84, 3.847, 3.857, 3.883, 3.855, 3.855, 3.842, 3.862, 3.85, 3.844, 3.844, 3.87, 3.859, 3.84, 3.86, 3.848]]]

    //generated from MNISTLogistic.jpynb
    var totalTimes = [[[[3.322, 3.239, 3.249, 3.253, 3.23, 3.242, 3.215, 3.245, 3.217, 3.207, 3.222, 3.384, 3.358, 3.205, 3.233, 3.22, 3.21, 3.229, 3.211, 3.213], [3.225, 3.222, 3.221, 3.227, 3.233, 3.217, 3.237, 3.252, 3.219, 3.219, 3.25, 3.225, 3.247, 3.208, 3.206, 3.206, 3.21, 3.243, 3.239, 3.335], [3.299, 3.262, 3.249, 3.219, 3.216, 3.257, 3.25, 3.213, 3.239, 3.225, 3.237, 3.23, 3.236, 3.212, 3.214, 3.249, 3.248, 3.223, 3.225, 3.24], [3.231, 3.234, 3.226, 3.224, 3.258, 3.245, 3.212, 3.228, 3.226, 3.214, 3.239, 3.257, 3.218, 3.248, 3.278, 3.448, 3.187, 3.224, 3.219, 3.218]], [[3.221, 3.212, 3.233, 3.217, 3.208, 3.199, 3.214, 3.212, 3.224, 3.219, 3.209, 3.211, 3.209, 3.216, 3.209, 3.201, 3.222, 3.207, 3.208, 3.211], [3.201, 3.203, 3.196, 3.206, 3.207, 3.21, 3.206, 3.201, 3.205, 3.208, 3.203, 3.21, 3.213, 3.208, 3.213, 3.225, 3.224, 3.216, 3.208, 3.205], [3.207, 3.213, 3.208, 3.21, 3.2, 3.208, 3.202, 3.206, 3.205, 3.199, 3.216, 3.207, 3.217, 3.217, 3.203, 3.2, 3.206, 3.201, 3.21, 3.205], [3.208, 3.207, 3.208, 3.205, 3.212, 3.204, 3.202, 3.203, 3.217, 3.199, 3.207, 3.211, 3.208, 3.209, 3.196, 3.21, 3.189, 3.221, 3.2, 3.208]], [[3.265, 3.261, 3.262, 3.263, 3.271, 3.267, 3.265, 3.274, 3.271, 3.268, 3.271, 3.273, 3.272, 3.264, 3.261, 3.287, 3.294, 3.285, 3.31, 3.444], [3.273, 3.295, 3.263, 3.269, 3.261, 3.275, 3.273, 3.259, 3.276, 3.286, 3.262, 3.262, 3.273, 3.264, 3.272, 3.27, 3.271, 3.272, 3.265, 3.269], [3.267, 3.275, 3.269, 3.261, 3.267, 3.259, 3.259, 3.282, 3.269, 3.269, 3.258, 3.265, 3.285, 3.266, 3.274, 3.274, 3.264, 3.263, 3.267, 3.26], [3.258, 3.265, 3.257, 3.269, 3.252, 3.322, 3.268, 3.287, 3.264, 3.277, 3.287, 3.273, 3.27, 3.268, 3.274, 3.273, 3.27, 3.306, 3.529, 3.51]], [[3.403, 3.538, 3.326, 3.307, 3.28, 3.363, 3.282, 3.307, 3.382, 3.285, 3.394, 3.277, 3.322, 3.293, 3.358, 3.327, 3.227, 3.248, 3.282, 3.284], [3.236, 3.287, 3.255, 3.259, 3.299, 3.262, 3.222, 3.214, 3.216, 3.222, 3.23, 3.242, 3.231, 3.262, 3.253, 3.227, 3.227, 3.236, 3.219, 3.248], [3.229, 3.216, 3.233, 3.226, 3.225, 3.224, 3.225, 3.219, 3.227, 3.23, 3.224, 3.252, 3.282, 3.229, 3.233, 3.216, 3.235, 3.231, 3.23, 3.244], [3.23, 3.24, 3.234, 3.23, 3.231, 3.241, 3.228, 3.229, 3.228, 3.231, 3.224, 3.22, 3.222, 3.222, 3.221, 3.221, 3.222, 3.243, 3.22, 3.237]]], [[[3.314, 3.286, 3.258, 3.303, 3.269, 3.273, 3.49, 3.288, 3.279, 3.312, 3.274, 3.285, 3.269, 3.276, 3.271, 3.297, 3.26, 3.27, 3.272, 3.271], [3.257, 3.279, 3.273, 3.291, 3.299, 3.274, 3.286, 3.314, 3.321, 3.285, 3.367, 3.301, 3.282, 3.263, 3.278, 3.282, 3.351, 3.287, 3.336, 3.367], [3.307, 3.279, 3.287, 3.287, 3.273, 3.294, 3.434, 3.322, 3.276, 3.319, 3.279, 3.276, 3.276, 3.266, 3.276, 3.263, 3.262, 3.284, 3.282, 3.306], [3.317, 3.258, 3.288, 3.319, 3.384, 3.325, 3.346, 3.314, 3.385, 3.35, 3.287, 3.258, 3.258, 3.271, 3.279, 3.287, 3.287, 3.347, 3.288, 3.3]], [[3.268, 3.338, 3.306, 3.341, 3.348, 3.24, 3.269, 3.268, 3.274, 3.346, 3.348, 3.312, 3.29, 3.536, 3.271, 3.275, 3.272, 3.268, 3.271, 3.283], [3.295, 3.279, 3.288, 3.3, 3.531, 3.298, 3.354, 3.348, 3.476, 3.331, 3.279, 3.27, 3.281, 3.273, 3.364, 3.322, 3.342, 3.521, 3.284, 3.274], [3.407, 3.302, 3.292, 3.349, 3.392, 3.447, 3.321, 3.487, 3.258, 3.297, 3.32, 3.354, 3.318, 3.518, 3.308, 3.288, 3.271, 3.257, 3.246, 3.276], [3.32, 3.248, 3.337, 3.319, 3.399, 3.371, 3.312, 3.459, 3.252, 3.268, 3.367, 3.288, 3.287, 3.3, 3.29, 3.271, 3.305, 3.265, 3.233, 3.301]], [[3.428, 3.456, 3.42, 3.467, 3.484, 3.459, 3.485, 3.504, 3.404, 3.497, 3.481, 3.467, 3.469, 3.496, 3.391, 3.416, 3.459, 3.505, 3.489, 3.449], [3.427, 3.403, 3.436, 3.521, 3.543, 3.748, 3.405, 3.405, 3.371, 3.445, 3.485, 3.454, 3.436, 3.389, 3.387, 3.47, 3.572, 3.469, 3.53, 3.399], [3.535, 3.634, 3.736, 3.426, 3.448, 3.46, 3.428, 3.463, 3.456, 3.565, 3.478, 3.47, 3.383, 3.389, 3.501, 3.434, 3.528, 3.412, 3.386, 3.459], [3.502, 3.414, 3.374, 3.408, 3.38, 3.378, 3.377, 3.361, 3.372, 3.372, 3.364, 3.393, 3.415, 3.517, 3.401, 3.377, 3.43, 3.403, 3.423, 3.45]], [[3.328, 3.322, 3.343, 3.315, 3.324, 3.298, 3.34, 3.337, 3.422, 3.352, 3.442, 3.435, 3.319, 3.324, 3.319, 3.315, 3.301, 3.307, 3.304, 3.314], [3.349, 3.315, 3.337, 3.395, 3.326, 3.323, 3.314, 3.381, 3.615, 3.365, 3.388, 3.317, 3.314, 3.331, 3.298, 3.333, 3.313, 3.344, 3.331, 3.368], [3.352, 3.315, 3.31, 3.332, 3.405, 3.515, 3.356, 3.338, 3.311, 3.373, 3.353, 3.334, 3.356, 3.354, 3.318, 3.312, 3.311, 3.312, 3.316, 3.316], [3.31, 3.319, 3.335, 3.347, 3.32, 3.315, 3.308, 3.317, 3.313, 3.319, 3.332, 3.318, 3.318, 3.32, 3.318, 3.319, 3.324, 3.317, 3.311, 3.311]]], [[[3.32, 3.311, 3.307, 3.298, 3.295, 3.307, 3.29, 3.289, 3.313, 3.299, 3.302, 3.297, 3.286, 3.298, 3.298, 3.301, 3.297, 3.299, 3.308, 3.299], [3.294, 3.312, 3.294, 3.304, 3.303, 3.297, 3.327, 3.311, 3.311, 3.3, 3.315, 3.319, 3.306, 3.299, 3.306, 3.304, 3.305, 3.305, 3.289, 3.293], [3.294, 3.295, 3.289, 3.272, 3.284, 3.283, 3.286, 3.288, 3.304, 3.28, 3.288, 3.289, 3.278, 3.291, 3.289, 3.29, 3.298, 3.289, 3.294, 3.293], [3.286, 3.291, 3.285, 3.29, 3.286, 3.287, 3.297, 3.288, 3.289, 3.288, 3.283, 3.286, 3.286, 3.296, 3.284, 3.304, 3.289, 3.288, 3.297, 3.288]], [[3.298, 3.305, 3.328, 3.288, 3.293, 3.32, 3.291, 3.285, 3.294, 3.286, 3.301, 3.298, 3.312, 3.317, 3.305, 3.305, 3.297, 3.288, 3.296, 3.285], [3.291, 3.28, 3.293, 3.358, 3.299, 3.282, 3.296, 3.285, 3.3, 3.293, 3.289, 3.29, 3.294, 3.284, 3.292, 3.289, 3.286, 3.294, 3.286, 3.29], [3.274, 3.281, 3.284, 3.272, 3.272, 3.275, 3.261, 3.291, 3.272, 3.261, 3.264, 3.284, 3.279, 3.285, 3.267, 3.271, 3.276, 3.267, 3.262, 3.275], [3.262, 3.26, 3.269, 3.259, 3.267, 3.273, 3.283, 3.269, 3.283, 3.269, 3.285, 3.269, 3.279, 3.269, 3.272, 3.267, 3.273, 3.284, 3.274, 3.267]], [[3.458, 3.458, 3.475, 3.47, 3.476, 3.48, 3.471, 3.482, 3.477, 3.462, 3.472, 3.477, 3.483, 3.484, 3.476, 3.489, 3.481, 3.477, 3.478, 3.469], [3.481, 3.471, 3.477, 3.484, 3.48, 3.49, 3.484, 3.485, 3.499, 3.471, 3.48, 3.503, 3.493, 3.475, 3.481, 3.476, 3.465, 3.478, 3.489, 3.46], [3.47, 3.467, 3.477, 3.467, 3.449, 3.453, 3.474, 3.477, 3.523, 3.475, 3.48, 3.468, 3.455, 3.461, 3.458, 3.462, 3.461, 3.469, 3.459, 3.467], [3.465, 3.465, 3.468, 3.454, 3.464, 3.465, 3.467, 3.469, 3.446, 3.461, 3.465, 3.467, 3.462, 3.459, 3.466, 3.463, 3.465, 3.452, 3.465, 3.466]], [[3.395, 3.389, 3.382, 3.39, 3.379, 3.395, 3.377, 3.384, 3.374, 3.36, 3.379, 3.384, 3.376, 3.39, 3.388, 3.397, 3.389, 3.387, 3.392, 3.395], [3.385, 3.388, 3.403, 3.402, 3.409, 3.413, 3.413, 3.419, 3.424, 3.427, 3.431, 3.431, 3.43, 3.412, 3.417, 3.429, 3.426, 3.453, 3.443, 3.441], [3.432, 3.441, 3.434, 3.422, 3.436, 3.436, 3.434, 3.429, 3.44, 3.427, 3.433, 3.428, 3.428, 3.425, 3.43, 3.435, 3.424, 3.434, 3.428, 3.444], [3.42, 3.414, 3.411, 3.43, 3.419, 3.421, 3.422, 3.421, 3.422, 3.427, 3.424, 3.43, 3.447, 3.459, 3.426, 3.426, 3.427, 3.42, 3.426, 3.427]]], [[[3.872, 3.769, 3.738, 3.681, 3.655, 3.657, 3.637, 3.644, 3.657, 3.684, 3.701, 3.655, 3.667, 3.68, 3.649, 3.66, 3.651, 3.677, 3.678, 3.693], [3.672, 3.675, 3.647, 3.66, 3.66, 3.677, 3.663, 3.651, 3.671, 3.68, 3.656, 3.662, 3.65, 3.662, 3.667, 3.659, 3.642, 3.667, 3.65, 3.648], [3.642, 3.639, 3.649, 3.638, 3.638, 3.642, 3.675, 3.665, 3.647, 3.637, 3.663, 3.661, 3.639, 3.64, 3.667, 3.654, 3.628, 3.638, 3.654, 3.645], [3.643, 3.655, 3.688, 3.647, 3.632, 3.672, 3.67, 3.628, 3.642, 3.658, 3.66, 3.631, 3.642, 3.678, 3.638, 3.675, 3.65, 3.655, 3.653, 3.651]], [[3.641, 3.647, 3.636, 3.68, 3.66, 3.681, 3.673, 3.829, 3.816, 3.816, 3.806, 3.825, 3.813, 3.829, 3.795, 3.835, 3.84, 3.803, 3.818, 3.77], [3.789, 3.706, 3.736, 3.72, 3.702, 3.717, 3.717, 3.721, 3.719, 3.694, 3.725, 3.728, 3.706, 3.71, 3.697, 3.706, 3.717, 3.687, 3.774, 3.793], [3.711, 3.689, 3.768, 3.719, 3.693, 3.713, 3.71, 3.723, 3.69, 3.67, 3.698, 3.675, 3.729, 3.687, 3.698, 3.673, 3.691, 3.668, 3.699, 3.7], [3.704, 3.69, 3.686, 3.691, 3.718, 3.699, 3.698, 3.686, 3.742, 3.707, 3.663, 3.683, 3.7, 3.677, 3.688, 3.7, 3.696, 3.688, 3.742, 3.693]], [[4.007, 3.976, 3.986, 3.992, 4.014, 4.002, 4.016, 3.98, 4.099, 4.085, 4.259, 4.106, 4.05, 4.036, 4.046, 4.02, 4.007, 3.959, 3.978, 3.927], [4.083, 4.332, 4.0, 3.993, 3.986, 3.96, 3.985, 3.965, 3.993, 3.964, 3.982, 3.954, 3.981, 3.961, 3.958, 4.005, 3.977, 3.967, 3.985, 4.0], [3.967, 3.974, 3.98, 3.993, 3.978, 3.966, 3.973, 3.999, 3.985, 3.983, 3.998, 3.987, 4.098, 4.307, 4.259, 4.13, 4.2, 4.106, 4.01, 3.985], [3.981, 4.001, 3.978, 3.97, 3.994, 3.981, 3.972, 3.987, 3.986, 3.993, 3.973, 3.965, 3.964, 3.998, 3.966, 3.97, 4.019, 3.997, 4.005, 4.072]], [[3.866, 3.834, 3.833, 3.866, 3.854, 3.847, 3.826, 3.816, 3.836, 3.847, 3.845, 3.828, 3.845, 3.834, 3.845, 3.841, 3.872, 3.827, 3.837, 3.869], [3.865, 3.836, 3.858, 3.859, 3.908, 3.84, 3.845, 3.842, 3.869, 3.851, 3.821, 3.853, 3.877, 3.832, 3.855, 3.869, 3.873, 3.878, 3.919, 3.901], [3.878, 3.89, 3.88, 3.889, 3.887, 3.873, 3.862, 3.868, 3.871, 3.849, 3.849, 3.872, 3.879, 3.84, 3.886, 3.848, 3.849, 3.84, 3.835, 3.843], [3.85, 3.872, 3.856, 3.866, 3.84, 3.847, 3.857, 3.883, 3.855, 3.855, 3.842, 3.862, 3.85, 3.844, 3.844, 3.87, 3.859, 3.84, 3.86, 3.848]]]]
        
    var epochs = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
    var learningRates = [0.01,0.1,0.5,1]
    var activationFunctions = ["ReLU", "Leaky ReLU", "Tanh", "Sigmoid"]
    var hiddenLayers = ["1","2","3","4"]
    
    //both are in KB, generated/created from MNISTLogistic.jpynb
    var calculatedModelSizes = [97.08, 200.84, 240.39, 322.48]
    var modelSizes = [103, 212, 254, 341]
    
    //default values for the pickers
    @State var epochsSelection = 10
    @State var learningRateSelection = 0.1
    @State var activationFunctionSelection = "ReLU"
    @State var hiddenLayerSelection = "2"
    
    @Environment(\.verticalSizeClass) var verticalSizeClass: UserInterfaceSizeClass?
    @Environment(\.horizontalSizeClass) var horizontalSizeClass: UserInterfaceSizeClass?
    
   
    func getPeakAccuracy() -> Double{
//
//                loopByActivationFunc(accuracies: accuracies1)
        let hiddenLayerIndex = hiddenLayers.firstIndex(of: $hiddenLayerSelection.wrappedValue)
//                print(totalAccuracies[Int(hiddenLayerIndex!)])
        let activationFuncIndex = activationFunctions.firstIndex(of: $activationFunctionSelection.wrappedValue)
//                print(totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)])
        let learningRateIndex = learningRates.firstIndex(of: $learningRateSelection.wrappedValue)
//                print(totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)])
        let epochIndex = epochs.firstIndex(of: $epochsSelection.wrappedValue)
        
        var peak = 0.00
        
        totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)].indices.forEach({ index in
            if (index <= Int(epochIndex!)) {
                
                if (totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)][Int(index)] > peak) {
                    
                    peak = totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)][Int(index)]
                    
                }
            }
            
           
        })
        return peak
        
    }
    
    func getFinalAccuracy() -> Double{
//
//                loopByActivationFunc(accuracies: accuracies1)
        let hiddenLayerIndex = hiddenLayers.firstIndex(of: $hiddenLayerSelection.wrappedValue)
//                print(totalAccuracies[Int(hiddenLayerIndex!)])
        let activationFuncIndex = activationFunctions.firstIndex(of: $activationFunctionSelection.wrappedValue)
//                print(totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)])
        let learningRateIndex = learningRates.firstIndex(of: $learningRateSelection.wrappedValue)
//                print(totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)])
        let epochIndex = epochs.firstIndex(of: $epochsSelection.wrappedValue)
        
        var peak = 0.00
        
        totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)].indices.forEach({ index in
            if (index <= Int(epochIndex!)) {
            
                    peak = totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)][Int(index)]
                    
            }
            
           
        })
        return peak
    }
    
    func getSummedTime() -> Double{
//
//                loopByActivationFunc(accuracies: accuracies1)
        let hiddenLayerIndex = hiddenLayers.firstIndex(of: $hiddenLayerSelection.wrappedValue)
//                print(totalAccuracies[Int(hiddenLayerIndex!)])
        let activationFuncIndex = activationFunctions.firstIndex(of: $activationFunctionSelection.wrappedValue)
//                print(totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)])
        let learningRateIndex = learningRates.firstIndex(of: $learningRateSelection.wrappedValue)
//                print(totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)])
        let epochIndex = epochs.firstIndex(of: $epochsSelection.wrappedValue)
        
        var time = 0.00
        
        totalAccuracies[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)].indices.forEach({ index in
            if (index <= Int(epochIndex!)) {
                
               time+=totalTimes[Int(hiddenLayerIndex!)][Int(activationFuncIndex!)][Int(learningRateIndex!)][Int(epochIndex!)]
            }
            
           
        })
        return time
        
    }
    
    @State private var orientation = UIDeviceOrientation.unknown
    
    var body: some View {

        NavigationView  {
        
            GeometryReader{g in
                ZStack {
//
//                    HStack{
//                        Text("Neural Studio")
//                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .bold))
//                            .padding(.horizontal, 5)
//                        Image("NeuralStudioLogo1")
//                            .resizable()
//                            .frame(width: g.size.height > g.size.width ? g.size.width * 0.06: g.size.height * 0.06, height: g.size.height > g.size.width ? g.size.width * 0.06: g.size.height * 0.06)
//                            .cornerRadius(8)
//                    }
//                    .position(x: UIScreen.main.bounds.size.width - UIScreen.main.bounds.size.width*0.18, y:UIScreen.main.bounds.size.height - UIScreen.main.bounds.size.height*0.95)
              
                    VStack (alignment: .center) {
                        //Title
                        Text("Neural Studio")
                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.11: g.size.height * 0.11, weight: .bold))
                            .multilineTextAlignment(.center)
                            .padding(.bottom, g.size.height > g.size.width ? g.size.width * 0.004: g.size.height * 0.004)
                        
                        //Neural Network
                        Image("testnetgraphic")
                            .resizable()
                            .aspectRatio(contentMode: .fit)
                            .padding(10)
                        
                        
                        //everything but iphone portrait mode
                        if ((horizontalSizeClass == .compact && verticalSizeClass == .regular) || (horizontalSizeClass == .regular && verticalSizeClass == .regular)) {
                            //Container for variables
                            HStack {
                                
                                VStack (alignment: .leading) {
                                    HStack {
                                        Text("Number of Epochs: ")
                                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                        Picker("Epochs", selection: $epochsSelection) {
                                            
                                            ForEach(epochs, id: \.self) {
                                                Text(String($0))
                                                    .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                            }
                                        }
                                        .pickerStyle(.menu)
                                        
                                    }
                                    
                                    HStack {
                                        Text("Learning Rate: ")
                                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                        Picker("Learning Rate", selection: $learningRateSelection) {
                                            
                                            ForEach(learningRates, id: \.self) {
                                                Text(String($0))
                                                    .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                            }
                                        }
                                        .pickerStyle(.menu)
                                        
                                    }
                                    
                                    HStack {
                                        Text("Activation Function: ")
                                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                        Picker("Activation Function", selection: $activationFunctionSelection) {
                                            
                                            ForEach(activationFunctions, id: \.self) {
                                                Text($0)
                                                    .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                            }
                                        }
                                        .pickerStyle(.menu)
                                        
                                    }
                                    
                                    HStack {
                                        Text("Hidden Layers: ")
                                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                        Picker("Hidden Layers", selection: $hiddenLayerSelection) {
                                            
                                            ForEach(hiddenLayers, id: \.self) {
                                                Text(String($0))
                                                    .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                            }
                                        }
                                        .pickerStyle(.menu)
                                        
                                    }
                                    
                                }
                                
                                VStack (alignment: .leading) {
                                    //do something to put a 0 if there is a number that is too short
                                    Text("Peak Accuracy: \((String(round((getPeakAccuracy()*100)*100)/100)))%")
                                        .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                        .padding(.bottom, g.size.height > g.size.width ? g.size.width * 0.006: g.size.height * 0.006)
                                    Text("Final Accuracy: \((String(round((getFinalAccuracy()*100)*100)/100)))%")
                                        .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                        .padding(.bottom, g.size.height > g.size.width ? g.size.width * 0.006: g.size.height * 0.006)
                                    Text("Training Time: \(String(round(getSummedTime()*10)/10)) seconds")
                                        .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                        .padding(.bottom, g.size.height > g.size.width ? g.size.width * 0.006: g.size.height * 0.006)
                                    Text("Model Size: \(modelSizes[Int(hiddenLayerSelection)!-1])KB")
                                        .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                }
                                
                            }
                        }
                        
                        //iphone portrait mode
                        else {
                            
                            //Container for variables
                            HStack {
                                
                                HStack {
                                    VStack (alignment: .leading) {
                                        HStack {
                                            Text("Number of Epochs: ")
                                                .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                            Picker("Epochs", selection: $epochsSelection) {
                                                
                                                ForEach(epochs, id: \.self) {
                                                    Text(String($0))
                                                        .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                                }
                                            }
                                            .pickerStyle(.menu)
                                            
                                        }
                                        
                                        HStack {
                                            Text("Learning Rate: ")
                                                .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                            Picker("Learning Rate", selection: $learningRateSelection) {
                                                
                                                ForEach(learningRates, id: \.self) {
                                                    Text(String($0))
                                                        .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                                }
                                            }
                                            .pickerStyle(.menu)
                                            
                                        }
                                    }
                                    
                                    VStack (alignment: .leading) {
                                        HStack {
                                            Text("Activation Function: ")
                                                .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                            Picker("Activation Function", selection: $activationFunctionSelection) {
                                                
                                                ForEach(activationFunctions, id: \.self) {
                                                    Text($0)
                                                        .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                                }
                                            }
                                            .pickerStyle(.menu)
                                            
                                        }
                                        
                                        HStack {
                                            Text("Hidden Layers: ")
                                                .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                            Picker("Hidden Layers", selection: $hiddenLayerSelection) {
                                                
                                                ForEach(hiddenLayers, id: \.self) {
                                                    Text(String($0))
                                                        .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .semibold))
                                                }
                                            }
                                            .pickerStyle(.menu)
                                            
                                        }
                                    }
                                    
                                }
                                
                                HStack () {
                                    //do something to put a 0 if there is a number that is too short
                                    
                                    VStack (alignment: .leading) {
                                        Text("Peak Accuracy: \((String(round((getPeakAccuracy()*100)*100)/100)))%")
                                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .medium))
                                            .padding(.bottom, g.size.height > g.size.width ? g.size.width * 0.006: g.size.height * 0.006)
                                        Text("Final Accuracy: \((String(round((getFinalAccuracy()*100)*100)/100)))%")
                                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .medium))
                                            .padding(.bottom, g.size.height > g.size.width ? g.size.width * 0.006: g.size.height * 0.006)
                                    }
                                    
                                    VStack (alignment: .leading) {
                                        
                                        Text("Training Time: \(String(round(getSummedTime()*10)/10)) seconds")
                                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .medium))
                                            .padding(.bottom, g.size.height > g.size.width ? g.size.width * 0.006: g.size.height * 0.006)
                                        Text("Model Size: \(modelSizes[Int(hiddenLayerSelection)!-1])KB")
                                            .font(.system(size: g.size.height > g.size.width ? g.size.width * 0.035: g.size.height * 0.035, weight: .medium))
                                    }
                                }
                                
                            }
                            
                        }
                        
                    }
                    .frame(
                        minWidth: 0,
                        maxWidth: .infinity,
                        minHeight: 0,
                        maxHeight: .infinity,
                        alignment: .center
                    )
                    .padding(.horizontal, g.size.height > g.size.width ? g.size.width * 0.01: g.size.height * 0.01)
                    .padding(.top, 0)
                }
                .ignoresSafeArea()
                .frame(
                    minWidth: 0,
                    maxWidth: .infinity,
                    minHeight: 0,
                    maxHeight: .infinity,
                    alignment: .center
                )
                .padding(.top, 0)
            }
        }
        .navigationViewStyle(StackNavigationViewStyle())
        .navigationBarBackButtonHidden(true)

    }
}

